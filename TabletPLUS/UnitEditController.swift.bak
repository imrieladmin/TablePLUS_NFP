//
//  UnitEditController.swift
//  TabletPLUS
//
//  Created by dhaval shah on 04/06/15.
//  Copyright (c) 2015 dhaval shah. All rights reserved.
//

import Foundation
import QuartzCore
import UIKit

class UnitEditController: UIViewController, UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate, NSURLConnectionDataDelegate, NSXMLParserDelegate
{
    
    var constants = Constants()
    var utility = Utility()
    
    @IBOutlet var lblPropAddress: UILabel!
    
    @IBOutlet var lblUnitName: UILabel!
    
    @IBOutlet var lblOccupier: UILabel!
    
    @IBOutlet var lblLineOfBussOccupier: UILabel!
    
    @IBOutlet var lblLandlord: UILabel!
    
    @IBOutlet var lblLineOfLandlord: UILabel!
    
    @IBOutlet var lblBusinessType: UILabel!
    
    @IBOutlet var lblEffectiveDate: UILabel!
    
    @IBOutlet var lblExclusionDate: UILabel!
    
    @IBOutlet var lblVecantDate: UILabel!
    
    @IBOutlet var lblObservation: UILabel!
    
    @IBOutlet var txtUnitName: UITextField!
    
    @IBOutlet var txtLineOfBussOccupier: UITextField!
    
    @IBOutlet var txtLandlord: UITextField!
   
    @IBOutlet var txtEffectiveDate: UITextField!
    
    @IBOutlet var txtExclusionDate: UITextField!
    
    @IBOutlet var txtVecantDate: UITextField!
    
    @IBOutlet var backGroundVIew: UIView!
    
    @IBOutlet var txtOccupier: UITextField!
    
    @IBOutlet var autocompleteTableView: UITableView!
    
    
    @IBOutlet var txtlineOfLandlord: UITextField!
    
    @IBOutlet var txtBusinessType: UITextField!
    
    @IBOutlet var lblStatus: UILabel!
    
    @IBOutlet var txtObservation: UITextView!
    
    @IBOutlet var sgcUnit: UISegmentedControl!
    
    //Images Embeding
    
    
    @IBOutlet var imgResetUnitName: UIView!
    @IBOutlet var imgResetOccupier: UIView!
    @IBOutlet var imgResetLineOfOccupier: UIView!
    
    @IBOutlet var imgResetLandlord: UIView!
    
    @IBOutlet var imgResetLineOfLandlord: UIImageView!
    
    @IBOutlet var imgResetTypeOfOccupier: UIImageView!
    
    
    @IBOutlet var imgResetEffectiveDate: UIImageView!
    
    @IBOutlet var imgResetExclusionDate: UIImageView!
    
    @IBOutlet var imgResetVecantDate: UIImageView!
    
    @IBOutlet var imgResetObeservation: UIImageView!
    
  //  let autocompleteTableView = UITableView(frame: CGRectMake(0,80,320,120), style: UITableViewStyle.Plain)
    
    var pastUrls = ["Poppins Restaurants","The Outdoor Group Limited","Leslie Perkins","HCW Consultancy","Carey Jones Architects Ltd","Whitfield","Card Crazy (2000) Ltd","Shelworks","Parfitt","Thameside Metropolitan Boro","Cecil Gee"]
    
  //  var pastURL: String = String()
    var autocompleteUrls = [String]()
    
    
    var menuBtn : UIBarButtonItem = UIBarButtonItem()
    var sortingImg   : UIImage = UIImage(named: "sorting-22pt")!
    var menuImg : UIImage = UIImage(named: "slider-22pt")!
    
    var txtLandlordChangeFlag = false
    var txtOccupierChangeFlag = false
    
    //XML parsing logic
    
    var parser = NSXMLParser()
    var posts = NSMutableArray()
    var elements = NSMutableDictionary()
    var element = NSString()
    var xmlCompanyName = NSMutableString()
    
    var comapnyNameStr: NSMutableString = ""
    
    var unit = Unit()
    var property = Property()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.navigationController?.navigationBar.tintColor = utility.uicolorFromHex(0x70B420)
        self.navigationController?.navigationBar.barTintColor = utility.uicolorFromHex(0x70B420)

        //Navigation Buttons - start
       
        menuBtn = UIBarButtonItem(image: menuImg,  style: UIBarButtonItemStyle.Plain, target: self, action: Selector ("menuPressed:"))
  
        //beginParsing()
        autocompleteTableView.reloadData()
        
        
        menuBtn.tintColor = UIColor.whiteColor()
        var buttons : NSArray = [menuBtn]
    
        self.navigationItem.rightBarButtonItems = buttons as [AnyObject]
        self.navigationItem.setRightBarButtonItems([menuBtn], animated: true)
    
        navigationController?.navigationBar.tintColor = UIColor.whiteColor()
     
        //Navigation Buttons - End
        
        //Side menu Start
        if self.revealViewController() != nil {
            menuBtn.target = self.revealViewController()
            menuBtn.action = "rightRevealToggle:"
            self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
            self.revealViewController().rightViewRevealWidth = 270
        }
        
        
        //Side menu End
     
        txtOccupier.delegate = self
        txtLandlord.delegate = self
        var comma = ", "
        lblPropAddress.text = "\(property.buildingName as String) \(comma) \(property.address as String)"
        autocompleteTableView.delegate = self
        autocompleteTableView.dataSource = self
        autocompleteTableView.scrollEnabled = true
        autocompleteTableView.hidden = true
       
        //Fileds Logic starts here
        txtUnitName.text = unit.unitName as String
        
        txtOccupier.text = unit.unitOccupierName as String
        txtLandlord.text = unit.unitLandlord as String
        
        
        
        
        txtObservation.text = ""
        txtObservation.layer.borderWidth = 0.5
        txtObservation.layer.borderColor = UIColor.lightGrayColor().CGColor
       
        
        utility.textFieldDesign(txtUnitName)
        txtUnitName.layer.borderColor =  UIColor.lightGrayColor().CGColor
        utility.textFieldDesign(txtOccupier)
        utility.textFieldDesign(txtLineOfBussOccupier)
        utility.textFieldDesign(txtLandlord)
        utility.textFieldDesign(txtlineOfLandlord)
        utility.textFieldDesign(txtBusinessType)
        utility.textFieldDesign(txtEffectiveDate)
        
        utility.textFieldDesign(txtExclusionDate)
        utility.textFieldDesign(txtVecantDate)
        
        
      
        
        
        //txtUnitName.layer.cornerRadius = -1
        
        //Labels text to be display
        
        lblUnitName.text = "Unidade"
        lblOccupier.text = "Ocupante"
        lblLineOfBussOccupier.text = "Ramo de Antividade do Ocupante"
        lblLandlord.text = "Proprietario"
        lblLineOfLandlord.text = "Ramo de Antividade do Proprietaro"
        lblBusinessType.text =  "Tipo de Occupacao"
        lblEffectiveDate.text = "Cadestro"
        lblExclusionDate.text = "Exclusao"
        lblVecantDate.text = "Ira vagar em"
        lblObservation.text = "Observaco"
        
        
        
        lblStatus.text =  utility.getStatusFromXmlStatus(unit.unitStatus as String)
        if(unit.unitStatus == constants.status.STATUS_DRAFT_XML){
            lblStatus.backgroundColor = UIColor.yellowColor()
        }
        else if(unit.unitStatus == constants.status.STATUS_PENDING_XML){
            lblStatus.backgroundColor = UIColor.redColor()
        }
        else if(unit.unitStatus == constants.status.STATUS_COMPLETED_XML){
            lblStatus.backgroundColor = UIColor.greenColor()
        }
        lblStatus.textColor = UIColor.blackColor()
        lblStatus.layer.cornerRadius = 4.0;
        lblStatus.layer.masksToBounds = true
       // labelView.addSubview(lblPropStatus)
        
    }
    func tableViewdesignFunc(textField: UITextField)
    {
        autocompleteTableView.hidden = false
     
        if txtOccupierChangeFlag == true
        {
              autocompleteTableView.frame = CGRectMake(250,93,textField.frame.width,120)
        }
        else
        {
              autocompleteTableView.frame = CGRectMake(250,175,textField.frame.width,120)
        }
        
      
        autocompleteTableView.layer.borderWidth = 1
        autocompleteTableView.layer.cornerRadius = 10
        autocompleteTableView.layer.borderColor = UIColor.whiteColor().CGColor
        autocompleteTableView.separatorColor = UIColor.whiteColor()
     //  autocompleteTableView.backgroundColor = UIColor.clearColor()
        
      //  autocompleteTableView.backgroundView = UIColor.
    }
    
    func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
    {
       
    //    println(self.txtOccupier)
        var substring = (textField.text as NSString).stringByReplacingCharactersInRange(range, withString: string)
       
        searchAutocompleteEntriesWithSubstring(substring)
        if substring != ""
        {
            tableViewdesignFunc(textField)
        }
        else
        {
            autocompleteTableView.hidden = true
        }
        return true     // not sure about this - could be false
    }
    
    func searchAutocompleteEntriesWithSubstring(substring: String)
    {
        autocompleteUrls.removeAll(keepCapacity: false)
        
        for curString in pastUrls
        {
             //println(curString)
            var myString:NSString! = (curString as NSString).lowercaseString
            
            var substringRange :NSRange! = myString.rangeOfString(substring.lowercaseString)
            
            if (substringRange.location  == 0)
            {
                autocompleteUrls.append(curString as String)
            }
            
        }
       // println("before reload")
        autocompleteTableView.reloadData()
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
      //  println("AUTOCOMPLETE \(autocompleteUrls.count)")
        return autocompleteUrls.count
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
  
        //  println("In the table view Cell")
        let autoCompleteRowIdentifier = "AutoCompleteRowIdentifier"
        var cell = tableView.dequeueReusableCellWithIdentifier(autoCompleteRowIdentifier) as? UITableViewCell
        cell?.backgroundColor = UIColor.darkGrayColor()
        cell?.alpha = 1
        cell?.textLabel?.textColor = UIColor.whiteColor()
        cell?.textLabel?.font 
        
        if let tempo1 = cell
        {
            let index = indexPath.row as Int
            cell!.textLabel!.text = autocompleteUrls[index]
        } else
        {
            cell = UITableViewCell(style: UITableViewCellStyle.Value1, reuseIdentifier: autoCompleteRowIdentifier)
        }
        return cell!
    
    
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)
    {
        let selectedCell : UITableViewCell = tableView.cellForRowAtIndexPath(indexPath)!
        
        if txtOccupierChangeFlag == true
        {
            txtOccupier.text = selectedCell.textLabel!.text
        }
        else
        {
            txtLandlord.text = selectedCell.textLabel!.text
        }
        autocompleteTableView.hidden = true
    }
    
        
    func datePickerViewMethod(pickerViewRef: UIDatePicker)
    {
        pickerViewRef.backgroundColor = UIColor.whiteColor()
        pickerViewRef.datePickerMode = UIDatePickerMode.Date
        
    }
    
    @IBAction func effectiveDateEditingBegin(sender: UITextField) {
         var datePickerView: UIDatePicker =   UIDatePicker()
        
        
        datePickerViewMethod(datePickerView) //common function to be
         sender.inputView = datePickerView
         datePickerView.addTarget(self, action: Selector("effectiveDateChanged:"), forControlEvents: UIControlEvents.ValueChanged)
        
    }
    func effectiveDateChanged(sender: UIDatePicker)
    {
        var dateformatter = NSDateFormatter()
        dateformatter.dateStyle = NSDateFormatterStyle.MediumStyle
        
        txtEffectiveDate.text = dateformatter.stringFromDate(sender.date)
    }
    
    
    
    @IBAction func exclusionDateEditingBegin(sender: UITextField) {
        var datePickerView: UIDatePicker =   UIDatePicker()
        datePickerViewMethod(datePickerView) //common function to be
        sender.inputView = datePickerView
        datePickerView.addTarget(self, action: Selector("exclusionDateChanged:"), forControlEvents: UIControlEvents.ValueChanged)
    }
    
    func exclusionDateChanged(sender: UIDatePicker)
    {
        var dateformatter = NSDateFormatter()
        dateformatter.dateStyle = NSDateFormatterStyle.MediumStyle
        txtExclusionDate.text = dateformatter.stringFromDate(sender.date)
    }
    
    @IBAction func vacantDateEditingBegin(sender: UITextField) {
        var datePickerView: UIDatePicker =   UIDatePicker()
        datePickerViewMethod(datePickerView) //common function to be
        sender.inputView = datePickerView
        datePickerView.addTarget(self, action: Selector("vacantDateChanged:"), forControlEvents: UIControlEvents.ValueChanged)
    }
    func vacantDateChanged(sender: UIDatePicker)
    {
        var dateformatter = NSDateFormatter()
        dateformatter.dateStyle = NSDateFormatterStyle.MediumStyle
        txtVecantDate.text = dateformatter.stringFromDate(sender.date)
    }
    
    
    
    
    
    func beginParsing()
    {
        pastUrls = []
        
        parser = NSXMLParser(contentsOfURL:(NSURL(string:"\(constants.SERVER_URL)PLUSWebService/plus/companies/getAllCompaniesXML")))!
        
        parser.delegate = self
        parser.parse()
        println("COUNT  \(pastUrls.count)")
        
        
    }
    
    
    func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [NSObject : AnyObject])
    {
        element = elementName
        if (elementName as NSString).isEqualToString("company")
        {
            
            elements = NSMutableDictionary.alloc()
            elements = [:]
            
            xmlCompanyName = NSMutableString.alloc()
            xmlCompanyName = ""
            
            
        }
    }
    
    func parser(parser: NSXMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?)
    {
        if (elementName as NSString).isEqualToString("company") {
            if !xmlCompanyName.isEqual(nil) {
                elements.setObject(comapnyNameStr, forKey: "orgName")
                
            }
            
            pastUrls.append(comapnyNameStr as String)
            comapnyNameStr = ""
        }
    }
    
    func parser(parser: NSXMLParser, foundCharacters string: String?)
    {
        
        if element.isEqualToString("orgName") {
            xmlCompanyName.appendString(string!)
          // comapnyNameStr.appendString(string!)
        }
        // println("Element 3 \(elements) \(title1) ")
    }
    
    @IBAction func txtOccupierChangeBegin(sender: AnyObject) {
        txtLandlordChangeFlag = false
        txtOccupierChangeFlag = true
    }
    
    @IBAction func txtOccupierChangeEnd(sender: AnyObject) {
         txtOccupierChangeFlag = false
        
    }
    @IBAction func txtLandLordChangeBegin(sender: AnyObject) {
        txtLandlordChangeFlag = true
    }
    @IBAction func txtEditChangedEnd(sender: AnyObject) {
         txtLandlordChangeFlag = false
    }
    
    
    
    @IBAction func unitSegmentControl(sender: AnyObject) {
        
        if sender.selectedSegmentIndex == 2
        {
            
            dispatch_async(dispatch_get_main_queue()) {
                
                
                let unitListingController = self.storyboard?.instantiateViewControllerWithIdentifier("UnitListing") as! UnitListingController
                
                unitListingController.property = self.property
                self.showViewController(unitListingController as UIViewController, sender: unitListingController )
                
                
            }

            
        }
    }
    
    @IBAction func unitValChangeSgc(sender: AnyObject) {
        if sender.selectedSegmentIndex == 2
        {
            
            dispatch_async(dispatch_get_main_queue()) {
                
                
                let unitListingController = self.storyboard?.instantiateViewControllerWithIdentifier("UnitListing") as! UnitListingController
                
                unitListingController.property = self.property
                self.showViewController(unitListingController as UIViewController, sender: unitListingController )
                
                
            }
            
            
        }
    }
}
